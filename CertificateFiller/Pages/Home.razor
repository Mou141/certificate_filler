@page "/"
@inject IJSRuntime JS
@using System.Text.Json;
@using System.IO;
@implements IAsyncDisposable;

<PageTitle>@pageTitle</PageTitle>

<h1>@pageTitle</h1>

<p>This app accepts a PDF file containing form fields and fills it based on data provided as CSV or a spreadsheet file.</p>

<table>
    <tr>
        <td class="form_cell">
            <label for="csv_input">Select a CSV or Spreadsheet File:</label>
        </td>
        <td class="form_cell">
            <InputFile @ref="csvInputFile" id="csv_input" OnChange="OnCsvFileSelected" accept=".csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
        </td>
    </tr>
    <tr>
        <td class="form_cell">
            <label for="pdf_input">Select a PDF Template File:</label>
        </td>
        <td class="form_cell">
            <InputFile @ref="pdfInputFile" id="pdf_input" OnChange="OnPdfFileSelected" accept=".pdf" />
        </td>
    </tr>
    <tr>
        <td colspan="2">
            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="@statusCssClass">@statusMessage</div>
            }
        </td>
    </tr>
</table>

@if (jsonResult != null && jsonResult.Length > 0)
{
    <div id="data_display">
        <h2>Loaded Data</h2>

        <table class="data_table">
                <thead>
                    <tr>
                        @foreach (var header in headers)
                        {
                            <th class="data_header data_cell">@header</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in jsonResult.Select((element, index) => new {element, index}))
                    {
                        <tr>
                            @foreach (var header in headers)
                            {
                                <td class="data_value data_cell">
                                    @GetPropertyValue(item.element, header)
                                </td>
                            }

                            <td class="data_value data_cell">
                                @if (pdfHandles.ContainsKey(item.index) && pdfNames.ContainsKey(item.index) && pdfUrls.ContainsKey(item.index))
                                {
                                    <a href="@pdfUrls[item.index]" target="_blank" download="@pdfNames[item.index]" type="application/pdf">Download PDF</a>
                                }
                            </td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(zipUrl))
                    {
                        <tr>
                            <td colspan="@headers.Count + 1" class="data_value data_header">
                                <a href="@zipUrl" target="_blank" download="certificates.zip">Download All PDFs as ZIP</a>
                            </td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(mergeUrl))
                    {
                        <tr>
                            <td colspan="@headers.Count + 1" class="data_value data_header">
                                <a href="@mergeUrl" target="_blank" download="merged.pdf">Download Merged PDF</a>
                            </td>
                        </tr>
                    }
                </tbody>
        </table>
   </div>
}

<table>
    <tr>
        <td class="data_cell">
            <button @onclick="clearAll">Clear</button>
        </td>
        <td class="data_cell">
            <button @onclick="CancelGeneration" disabled="@(!isGenerating)">Cancel</button>
        </td>
        <td class="data_cell">
            <button @onclick="GenerateAllPDFs" disabled="@(isGenerating || jsonResult == null || jsonResult.Length == 0 || pdfHandles.Count > 0 || pdfNames.Count > 0 || pdfUrls.Count > 0)">Generate PDFs</button>
        </td>
        <td class="data_cell">
            <label for="ignore_extra_fields">Ignore Extra/Missing Fields:</label>
            <input id="ignore_extra_fields" type="checkbox" @bind="ignoreExtraFields" />
        </td>
    </tr>
</table>

@code {
    private const string pageTitle = "Certificate Filler";

    private InputFile? csvInputFile;
    private InputFile? pdfInputFile;

    private SheetJsInterop? sheetJsInterop;
    private UtilsInterop? utilsInterop;
    private PdfInterop? pdfInterop;

    private string? statusMessage = null;
    private string statusCssClass = "";

    private JsonElement[]? jsonResult = null;
    private List<String> headers = new List<string>();
    private Dictionary<int, string> pdfHandles = new Dictionary<int, string>(); // Store PDF handles of the generated PDFs by index
    private Dictionary<int, string> pdfNames = new Dictionary<int, string>(); // Store PDF names by index
    private Dictionary<int, string> pdfUrls = new Dictionary<int, string>(); // Store PDF URLs by index

    private string? pdf_handle = null;

    private CancellationTokenSource? cts; // For cancelling PDF generation if needed
    private bool isGenerating = false; // Flag to prevent multiple simultaneous generations

    private bool ignoreExtraFields;

    private string? zipUrl = null; // Store the URL of the generated ZIP file
    private string? mergeUrl = null; // Store the URL of the merged PDF file

    private void setJsonData(JsonElement[] data)
    {
        jsonResult = data;

        if (jsonResult == null || jsonResult.Length == 0)
        {
            headers.Clear();
            return;
        }

        var headerSet = new HashSet<string>();

        foreach (var item in jsonResult)
        {
            foreach (var property in item.EnumerateObject())
            {
                headerSet.Add(property.Name);
            }
        }

        headers = headerSet.ToList();
    }

    private string? GetPropertyValue(JsonElement item, string propertyName)
    {
        if (item.TryGetProperty(propertyName, out var prop))
        {
            return prop.ValueKind switch
            {
                JsonValueKind.String => prop.GetString(),
                JsonValueKind.Number => prop.GetRawText(),
                JsonValueKind.True => "true",
                JsonValueKind.False => "false",
                _ => prop.GetRawText(),
            };
        }
        return null;
    }

    protected override void OnInitialized()
    {
        sheetJsInterop = new SheetJsInterop(JS);
        utilsInterop = new UtilsInterop(JS);
        pdfInterop = new PdfInterop(JS);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await pdfInterop!.RegisterUnloadListenerAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (sheetJsInterop != null)
        {
            await sheetJsInterop.DisposeAsync();
            sheetJsInterop = null;
        }

        if (utilsInterop != null)
        {
            await utilsInterop.DisposeAsync();
            utilsInterop = null;
        }

        if (pdfInterop != null)
        {
            await pdfInterop.DisposeAsync();
            pdfInterop = null;
        }
    }

    private void displayStatusMessage(string message)
    {
        statusMessage = message;
        statusCssClass = "message_class";
        StateHasChanged();
    }

    private void displayErrorMessage(string message)
    {
        statusMessage = message;
        statusCssClass = "error_class";
        StateHasChanged();
    }

    private void displaySuccessMessage(string message)
    {
        statusMessage = message;
        statusCssClass = "success_class";
        StateHasChanged();
    }

    private void clearStatusMessage()
    {
        statusMessage = null;
        statusCssClass = "";
        StateHasChanged();
    }

    private async Task OnCsvFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        displayStatusMessage("Processing CSV/Spreadsheet file...");

        try {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB limit
            using var ms = new MemoryStream();

            await stream.CopyToAsync(ms);

            var bytes = ms.ToArray();

            var data = await sheetJsInterop!.ParseFileAsync(bytes);

            setJsonData(data);

        } catch (Exception ex)
        {
            displayErrorMessage($"Error processing file: {ex.Message}");
            return;
        }

        displaySuccessMessage("CSV/Spreadsheet file processed successfully.");
    }

    private async void clearAll()
    {
        CancelGeneration();
        clearStatusMessage();

        jsonResult = null;
        headers.Clear();

        await utilsInterop!.ClearInputFileAsync(csvInputFile);
        await utilsInterop!.ClearInputFileAsync(pdfInputFile);

        await pdfInterop!.ClearAllPdfsAsync();

        pdf_handle = null;
        pdfHandles.Clear();
        pdfNames.Clear();
        pdfUrls.Clear();

        zipUrl = null;
    }

    private string GetFileNameFromData(JsonElement item, string fallbackValue = "default")
    {
        string? baseName = null;

        foreach (var property in item.EnumerateObject())
        {
            if (string.Equals(property.Name, "Name", StringComparison.OrdinalIgnoreCase))
            {
                string? nameValue = property.Value.GetString();

                if (!string.IsNullOrWhiteSpace(nameValue))
                {
                    baseName = nameValue.Trim();
                    break;
                }
            }
        }

        if (string.IsNullOrEmpty(baseName))
        {
            baseName = fallbackValue.Trim();
        }

        foreach (char c in System.IO.Path.GetInvalidFileNameChars())
        {
            baseName = baseName.Replace(c.ToString(), "_");
        }

        string fileName = $"{baseName}.pdf";
        int index = 1;

        HashSet<string> existingNames = new HashSet<string>(pdfNames.Values, StringComparer.OrdinalIgnoreCase); // Ignore case when checking for existing names

        while (existingNames.Contains(fileName))
        {
            fileName = $"{baseName}_{index}.pdf";
            index++;
        }

        return fileName;
    }

    private async Task OnPdfFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        displayStatusMessage("Processing PDF file...");

        try {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB limit
            using var ms = new MemoryStream();

            await stream.CopyToAsync(ms);

            var bytes = ms.ToArray();

            pdf_handle = await pdfInterop!.LoadPdfAsync(bytes);

        } catch (Exception ex)
        {
            displayErrorMessage($"Error processing PDF file: {ex.Message}");
            return;
        }

        displaySuccessMessage("PDF file processed successfully.");
    }

    private async Task GeneratePdf(JsonElement item, int index)
    {
        string thisHandle = await pdfInterop!.FillAndFlattenPdfAsync(pdf_handle, item, !ignoreExtraFields);
        string fileName = GetFileNameFromData(item, thisHandle);
        string url = await pdfInterop!.GetPdfBlobUrlAsync(thisHandle);

        pdfHandles[index] = thisHandle;
        pdfNames[index] = fileName;
        pdfUrls[index] = url;
    }

    private async Task GenerateZipFile()
    {
        if (pdfHandles.Count == 0)
        {
            throw new InvalidOperationException("No PDFs generated to create ZIP file.");
        }

        displayStatusMessage("Generating ZIP file...");
        StateHasChanged(); // Force UI update to show progress

        Dictionary<string, string> pdfData = new Dictionary<string, string>();

        foreach (KeyValuePair<int, string> item in pdfHandles)
        {
            var index = item.Key;
            var handle = item.Value;

            if (!pdfNames.ContainsKey(index))
            {
                throw new InvalidOperationException($"PDF name not found for index {index} (handle: {handle}).");
            }

            pdfData[pdfNames[index]] = handle;
        }

        zipUrl = await pdfInterop!.CreateZipFromPdfsAsync(pdfData);
        StateHasChanged(); // Force UI update to show ZIP download link
    }

    private async Task MergePdfs()
    {
        displayStatusMessage("Merging PDFs...");
        StateHasChanged(); // Force UI update to show progress

        string mergedPdfHandle = await pdfInterop!.MergePdfsAsync(pdfHandles.Values.ToList());
        mergeUrl = await pdfInterop!.GetPdfBlobUrlAsync(mergedPdfHandle);

        displaySuccessMessage("PDFs merged successfully.");
        StateHasChanged(); // Force UI update to show merged PDF download link
    }

    private async Task GenerateAllPDFs()
    {
        if (isGenerating)
        {
            return; // Prevent multiple simultaneous generations
        }

        if (pdf_handle == null)
        {
            displayErrorMessage("No PDF template file selected.");
            return;
        }

        if (jsonResult == null || jsonResult.Length == 0)
        {
            displayErrorMessage("No data loaded from CSV/Spreadsheet file.");
            return;
        }

        if (pdfHandles.Count > 0 || pdfNames.Count > 0 || pdfUrls.Count > 0)
        {
            displayErrorMessage("PDFs already generated. Please clear before generating new PDFs.");
            return;
        }

        try {
            isGenerating = true;
            cts = new CancellationTokenSource();

            displayStatusMessage("Generating PDFs...");
            StateHasChanged(); // Force UI update to show progress

            int index = 0;

            foreach (var item in jsonResult)
            {
                cts.Token.ThrowIfCancellationRequested();
                displayStatusMessage($"Generating PDF {index+1} of {jsonResult.Length}...");

                StateHasChanged(); // Force UI update to show progress

                await GeneratePdf(item, index);
                index++;
            }

            displayStatusMessage("All PDFs generated successfully.");
            StateHasChanged(); // Force UI update to show final status

            cts.Token.ThrowIfCancellationRequested(); // Check for cancellation before generating ZIP file
            await GenerateZipFile();

            cts.Token.ThrowIfCancellationRequested(); // Check for cancellation before merging PDFs
            await MergePdfs();

        } catch (OperationCanceledException)
        {
            displayErrorMessage("PDF generation cancelled.");
            return;
        }
        catch (Exception ex)
        {
            displayErrorMessage($"Error generating PDFs: {ex.Message}");
            return;
        }
        finally
        {
            isGenerating = false;
            cts?.Dispose();
            cts = null;
        }

        displaySuccessMessage("PDF generation tasks completed.");
    }

    private void CancelGeneration()
    {
        cts?.Cancel();
    }
}
